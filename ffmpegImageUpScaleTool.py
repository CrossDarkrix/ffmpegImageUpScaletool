# -*- coding: utf-8 -*-

import concurrent.futures
import multiprocessing
import multiprocessing as mp
import os
import platform
import shutil
import subprocess
import sys
import tarfile
import threading
import urllib.request
import zipfile
from io import BytesIO

from PySide6.QtCore import (QCoreApplication, QByteArray, QMetaObject, QRect,
                            QSize, Qt, Signal)
from PySide6.QtGui import (QFont, QIcon,
                           QImage, QPixmap)
from PySide6.QtWidgets import (QApplication, QLabel, QLineEdit, QProgressBar,
                               QPushButton, QSizePolicy, QSpinBox, QMainWindow, QFileDialog, QFileIconProvider,
                               QMessageBox)

DragPath = ['']
DragPath2 = ['']

class UpScaleObject(object):
    def __init__(self, filename, magnification, ffmpeg_check):
        self.fname = filename
        self.magnification = magnification
        self.ffmpeg_check = ffmpeg_check

    def upscale(self):
        if not self.ffmpeg_check:
            if self.fname.split('.')[-1].lower() == 'png':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'jpg':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'jpeg':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'gif':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'tiff':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'bmp':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'rgb':
                subprocess.run('{} -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(os.path.join(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
        else:
            if self.fname.split('.')[-1].lower() == 'png':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'jpg':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'jpeg':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'gif':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'tiff':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'bmp':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass
            if self.fname.split('.')[-1].lower() == 'rgb':
                subprocess.run('ffmpeg -hide_banner -loglevel quiet -i "{}" -vf scale=iw*{}:ih*{} "{}"'.format(self.fname, self.magnification, self.magnification, '{} (x{}).png'.format(self.fname.split('.')[0], self.magnification)), shell=True)
                try:
                    os.remove(self.fname)
                except:
                    pass

class RenameSeparatelyObject(object):
    def __init__(self, workpath, targetpath, magnification):
        self.workpath = workpath
        self.targetpath = targetpath
        self.magnification = magnification

    def scaledrename(self, FName):
        if ' (x{})'.format(self.magnification) in FName:
            try:
                os.rename(FName, FName.replace(' (x{})'.format(self.magnification), ''))
            except:
                pass

    def find_imagefile(self, path):
        for root, dirs, file in os.walk(path):
            yield root
            for f in file:
                yield os.path.join(root, f)

    def run(self):
        for file2 in self.find_imagefile(os.path.join(self.targetpath)):
            file2 = file2.replace(os.sep, '/')
            if os.path.exists(os.path.dirname(file2)):
                os.chdir(os.path.dirname(file2))
            else:
                os.chdir(os.path.dirname(os.path.abspath(file2)))
            self.scaledrename(file2.split('/')[-1])
            os.chdir(self.workpath)

class dragQLineEdit(QLineEdit):
    def __init__(self, parent=None):
        super(dragQLineEdit, self).__init__(parent)
        self.setPlaceholderText('Input Folder')

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
            event.setAccepted(True)
            self.setText(str(event.mimeData().urls()[0].toLocalFile()))
            DragPath[0] = str(event.mimeData().urls()[0].toLocalFile())
        else:
            event.ignore()

class dragQLineEdit2(QLineEdit):
    def __init__(self, parent=None):
        super(dragQLineEdit2, self).__init__(parent)
        self.setPlaceholderText('Output Folder')

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
            event.setAccepted(True)
            self.setText(str(event.mimeData().urls()[0].toLocalFile()))
            DragPath2[0] = str(event.mimeData().urls()[0].toLocalFile())
        else:
            event.ignore()

class MainWindow(QMainWindow):
    FileDropped = Signal(list)
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setAcceptDrops(True)
        self.setWindowIcon(QIcon(QPixmap(QSize(512, 512)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))

class UIFFmUpImg(object):
    def setupUi(self, ffmupimg):
        if not ffmupimg.objectName():
            ffmupimg.setObjectName("ffmupimg")
        ffmupimg.resize(1102, 342)
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ffmupimg.sizePolicy().hasHeightForWidth())
        ffmupimg.setSizePolicy(sizePolicy)
        font = QFont()
        font.setFamilies(["Arial"])
        font.setPointSize(20)
        ffmupimg.setFont(font)
        ffmupimg.setStyleSheet("QWidget{color: White;background-color: #131519}")
        self.FileCompleteProgressBar = QProgressBar(ffmupimg)
        self.FileCompleteProgressBar.setObjectName(u"FileCompleteProgressBar")
        self.FileCompleteProgressBar.setGeometry(QRect(10, 280, 1081, 51))
        font1 = QFont()
        font1.setFamilies(["Arial"])
        font1.setPointSize(10)
        self.FileCompleteProgressBar.setFont(font1)
        self.FileCompleteProgressBar.setStyleSheet("QProgressBar{color: White;background-color: #131519;}")
        self.FileCompleteProgressBar.setValue(0)
        self.FileCompleteProgressBar.setTextVisible(False)
        self.Input = dragQLineEdit(ffmupimg)
        self.Input.setObjectName("Input")
        self.Input.setGeometry(QRect(10, 80, 411, 41))
        sizePolicy.setHeightForWidth(self.Input.sizePolicy().hasHeightForWidth())
        self.Input.setSizePolicy(sizePolicy)
        self.Input.setFont(font)
        self.Input.setStyleSheet("QLineEdit{color: White;background-color: #131519;border 0px;}")
        self.Input.setFrame(True)
        self.Output = dragQLineEdit2(ffmupimg)
        self.Output.setObjectName("Output")
        self.Output.setGeometry(QRect(610, 80, 421, 41))
        sizePolicy.setHeightForWidth(self.Output.sizePolicy().hasHeightForWidth())
        self.Output.setSizePolicy(sizePolicy)
        self.Output.setFont(font)
        self.Output.setStyleSheet("QLineEdit{color: White;background-color: #131519;border 0px;}")
        self.Output.setFrame(True)
        self.Magnification = QSpinBox(ffmupimg)
        self.Magnification.setObjectName("Magnification")
        self.Magnification.setGeometry(QRect(480, 80, 111, 41))
        self.Magnification.setFont(font)
        self.Magnification.setStyleSheet("QSpinBox{color: White;background-color: #131519;}")
        self.Magnification.setFrame(True)
        self.Magnification.setAlignment(Qt.AlignCenter)
        self.OpenFolder = QPushButton(ffmupimg)
        self.OpenFolder.setObjectName("OpenFolder")
        self.OpenFolder.setGeometry(QRect(430, 80, 41, 41))
        sizePolicy.setHeightForWidth(self.OpenFolder.sizePolicy().hasHeightForWidth())
        self.OpenFolder.setSizePolicy(sizePolicy)
        font2 = QFont()
        font2.setFamilies(["Arial"])
        font2.setPointSize(30)
        self.OpenFolder.setFont(font2)
        self.OpenFolder.setStyleSheet("QPushButton{color: #131519;background-color: #3d3d3d;}")
        self.OpenFolder.setIcon(QFileIconProvider().icon(QFileIconProvider.Folder))
        self.OpenFolder.setIconSize(QSize(128, 128))
        self.OpenFolder.clicked.connect(self.InputFolders)
        self.OutputFolder = QPushButton(ffmupimg)
        self.OutputFolder.setObjectName("OutputFolder")
        self.OutputFolder.setGeometry(QRect(1040, 80, 41, 41))
        sizePolicy.setHeightForWidth(self.OutputFolder.sizePolicy().hasHeightForWidth())
        self.OutputFolder.setSizePolicy(sizePolicy)
        self.OutputFolder.setFont(font2)
        self.OutputFolder.setStyleSheet("QPushButton{color: #131519;background-color: #3d3d3d;}")
        self.OutputFolder.setIcon(QFileIconProvider().icon(QFileIconProvider.Folder))
        self.OutputFolder.setIconSize(QSize(128, 128))
        self.OutputFolder.clicked.connect(self.OutputFolders)
        self.StartConvert = QPushButton(ffmupimg)
        self.StartConvert.setObjectName("StartConvert")
        self.StartConvert.setGeometry(QRect(350, 160, 381, 81))
        sizePolicy.setHeightForWidth(self.StartConvert.sizePolicy().hasHeightForWidth())
        self.StartConvert.setSizePolicy(sizePolicy)
        font3 = QFont()
        font3.setFamilies([u"Arial"])
        font3.setPointSize(33)
        self.StartConvert.setFont(font3)
        self.StartConvert.setStyleSheet("QPushButton{color: #131519;background-color: White;}\n"
                                      "QPushButton:checked {background-color: #2b2b2b; color: White;}")
        self.StartConvert.setCheckable(True)
        self.StartConvert.setFlat(False)
        self.StartConvert.clicked.connect(self.convertClicked)

        self.Title = QLabel(ffmupimg)
        self.Title.setObjectName("Title")
        self.Title.setGeometry(QRect(40, 10, 991, 51))
        self.Title.setFont(font)
        self.Title.setStyleSheet(u"QLabel{color: White;background-color: #131519}")
        self.Title.setAlignment(Qt.AlignCenter)
        self.ffmupimg = ffmupimg
        self.ffmalert = QMessageBox(ffmupimg)
        self.is_conv_ok = True
        self.retranslateUi(ffmupimg)
        self.StartConvert.setDefault(False)
        self.InputFolderPath = ''
        self.OutputFolderPath = ''
        self.ffmpeg_check_ok = False

        QMetaObject.connectSlotsByName(ffmupimg)

    def find_imagefile(self, path):
        for root, dirs, file in os.walk(path):
            yield root
            for f in file:
                yield os.path.join(root, f)

    def detect_totalfiles(self, path):
        TFiles = []
        for r, d, file in os.walk(path):
            for f in file:
                TFiles.append(f)
        return len(TFiles)

    def InputFolders(self, c):
        self.InputFolderPath = QFileDialog.getExistingDirectory(parent=None, caption='Select Input Folder', dir='.')
        if self.InputFolderPath == '':
            self.InputFolderPath = os.path.expanduser('~').replace(os.sep, '/')
        self.Input.setText(self.InputFolderPath)

    def OutputFolders(self, c):
        self.OutputFolderPath = QFileDialog.getExistingDirectory(parent=None, caption='Select Output Folder', dir=os.path.expanduser('~'))
        if self.OutputFolderPath == '':
            self.OutputFolderPath = os.path.expanduser('~').replace(os.sep, '/')
        self.Output.setText(self.OutputFolderPath)

    def convertClicked(self, c):
        if self.StartConvert.isChecked():
            self.ConvertStart()
        else:
            self.ConvertPause()

    def ffmupimg_main(self):
        self.FileCompleteProgressBar.setValue(0)
        if self.InputFolderPath == '':
            self.InputFolderPath = DragPath[0]
        if self.OutputFolderPath == '':
            self.OutputFolderPath = DragPath2[0]
        if not self.InputFolderPath == '':
            if not self.OutputFolderPath == '':
                outputdir_name = '{}(scale_{}.000x)'.format(self.InputFolderPath.split('/')[-1], self.Magnification.value())
                try:
                    shutil.copytree(self.InputFolderPath,  os.path.join(self.OutputFolderPath, outputdir_name))
                except:
                    pass
                back_path = os.getcwd()
                os.chdir(os.path.join(os.path.join(self.OutputFolderPath, outputdir_name)))
                workpath = os.getcwd()
                self.TotalFiles = self.detect_totalfiles(workpath)
                for c, file1 in enumerate(self.find_imagefile(os.path.join(os.path.join(self.OutputFolderPath, outputdir_name)))):
                    file1 = file1.replace(os.sep, '/')
                    if self.is_conv_ok:
                        if os.path.exists(os.path.dirname(file1)):
                            os.chdir(os.path.dirname(file1))
                        else:
                            os.chdir(os.path.dirname(os.path.abspath(file1)))
                        if not '(x{})'.format(self.Magnification.value()) in file1.split('/')[-1:][0]:
                            upscale = UpScaleObject(file1.split('/')[-1], '{}'.format(self.Magnification.value()), self.ffmpeg_check_ok)
                            UpScaleProcess = mp.Process(target=upscale.upscale, daemon=True)
                            UpScaleProcess.start()
                            UpScaleProcess.join()
                            UpScaleProcess.terminate()
                        os.chdir(workpath)
                        self.FileCompleteProgressBar.setValue(min((c / self.TotalFiles) * 100.0, 100.0))
                    else:
                        break
                if self.is_conv_ok:
                    ffmworkerThread = RenameSeparatelyObject(workpath, os.path.join(self.OutputFolderPath, outputdir_name), '{}'.format(self.Magnification.value()))
                    mp.Process(target=ffmworkerThread.run, daemon=True).start()
                os.chdir(back_path)
                self.StartConvert.setChecked(False)
                self.StartConvert.setText('Start')
                self.FileCompleteProgressBar.setValue(0)

    def ConvertStart(self):
        self.StartConvert.setText('Stop')
        check_ffmpeg = subprocess.Popen('ffmpeg -hide_banner -version', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[1].decode(errors='ignore')
        if not check_ffmpeg == '':
            if platform.system() == 'Windows':
                os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'), exist_ok=True)
                back_path = os.getcwd()
                os.chdir(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                win_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                with zipfile.ZipFile(BytesIO(win_ffmpeg)) as ffmpegzip:
                    ffmpegzip.extractall(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp') + '/.')
                shutil.move(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp', 'ffmpeg-master-latest-win64-gpl', 'bin'), os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'))
                os.chdir(back_path)
                shutil.rmtree(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
            if platform.system() == 'Linux':
                os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'), exist_ok=True)
                back_path = os.getcwd()
                os.chdir(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                linux_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-linux64-gpl.tar.xz', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                with open('tmp.tar.xz', 'wb') as f:
                    f.write(linux_ffmpeg)
                os.remove('tmp.tar.xz')
                with tarfile.open('tmp.tar.xz', 'r:xz') as ffmpegzip:
                    ffmpegzip.extractall(path=os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp') + '/.')
                shutil.move(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp', 'ffmpeg-master-latest-linux64-gpl', 'bin'), os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'))
                os.chdir(back_path)
                shutil.rmtree(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                os.chmod(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), 0o755)
            if platform.system() == 'Darwin':
                if not platform.machine() == 'arm64':
                    os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'), exist_ok=True)
                    darwin_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://evermeet.cx/ffmpeg/ffmpeg-5.1.2.zip', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                    with zipfile.ZipFile(BytesIO(darwin_ffmpeg)) as ffmpegzip:
                        ffmpegzip.extractall(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin') + '/.')
                    os.chmod(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), 0o755)
                else:
                    try:
                        check_darwin_ffmpeg = subprocess.Popen('brew install ffmpeg', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[1].decode(errors='ignore')
                    except:
                        check_darwin_ffmpeg = '1'
                    if not check_darwin_ffmpeg == '':
                        sys.exit(1)
        else:
            self.ffmpeg_check_ok = True
        concurrent.futures.ThreadPoolExecutor(os.cpu_count() * 50).submit(self.ffmupimg_main)

    def ConvertPause(self):
        self.is_conv_ok = False
        self.StartConvert.setText('Start')

    def retranslateUi(self, ffmupimg):
        ffmupimg.setWindowTitle(QCoreApplication.translate("ffmupimg", "FFmpeg UpScale Image Tool", None))
        self.StartConvert.setText(QCoreApplication.translate("ffmupimg", "Start", None))
        self.Title.setText(QCoreApplication.translate("ffmupimg", "FFmpeg Image UpScale Tool", None))

def main():
    app = QApplication(sys.argv)
    main_win = MainWindow()
    ui = UIFFmUpImg()
    ui.setupUi(main_win)
    main_win.setFixedSize(main_win.size())
    main_win.setWindowFlags(Qt.WindowStaysOnTopHint)
    main_win.show()
    app.exec()

if __name__ == '__main__':
    if platform.system() == 'Linux':
        mp.set_start_method('fork')
    else:
        mp.set_start_method('spawn')
    main()